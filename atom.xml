<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://gbcat.github.io</id>
    <title>黑猫.live</title>
    <updated>2021-07-20T03:30:28.042Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://gbcat.github.io"/>
    <link rel="self" href="https://gbcat.github.io/atom.xml"/>
    <subtitle>那些说天空拥有极限的人都从未离开过地面</subtitle>
    <logo>https://gbcat.github.io/images/avatar.png</logo>
    <icon>https://gbcat.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 黑猫.live</rights>
    <entry>
        <title type="html"><![CDATA[Cocos接入[穿山甲]+[友盟基础功能]指南]]></title>
        <id>https://gbcat.github.io/post/1/</id>
        <link href="https://gbcat.github.io/post/1/">
        </link>
        <updated>2021-07-20T02:47:39.000Z</updated>
        <content type="html"><![CDATA[<h1 id="cocos接入穿山甲友盟基础功能指南">Cocos接入[穿山甲]+[友盟基础功能]指南</h1>
<h2 id="支持的广告类型">支持的广告类型</h2>
<ul>
<li>开屏广告</li>
<li>激励视频</li>
<li>模板渲染插屏</li>
<li>模板渲染Banner</li>
</ul>
<h2 id="文件修改记录">文件修改记录</h2>
<ul>
<li>res/xml/file_paths.xml 🟢</li>
<li>工程级build.gradle 🟡</li>
<li>res/layout/splash.xml🟢</li>
<li>res/values/strings.xml🟡</li>
<li>应用级build.gradle 🟡</li>
<li>清单文件AndroidManifest.xml🟡</li>
<li>app/src/org/cocos2dx/javascript/CocosApplication.java🟢</li>
<li>app/src/org/cocos2dx/javascript/SplashActivity.java🟢</li>
<li>app/src/org/cocos2dx/javascript/AppActivity.java🟡</li>
</ul>
<p><em>注释 🟡代表改文件有修改 🟢代表新增文件</em></p>
<h2 id="详细修改内容">详细修改内容</h2>
<p>修改Android Gradle Plugin Version为3.4.3,修改Gradle Version为5.1.1</p>
<figure data-type="image" tabindex="1"><img src="https://gbcat.github.io/post-images/1626750808206.webp" alt="" loading="lazy"></figure>
<p><strong>res/xml/file_paths.xml 🟢</strong></p>
<p>在对应目录下创建新文件,文件内容如下</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;paths xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;
   &lt;external-path name=&quot;tt_external_root&quot; path=&quot;.&quot; /&gt;
   &lt;external-path name=&quot;tt_external_download&quot; path=&quot;Download&quot; /&gt;
   &lt;external-files-path name=&quot;tt_external_files_download&quot; path=&quot;Download&quot; /&gt;
   &lt;files-path name=&quot;tt_internal_file_download&quot; path=&quot;Download&quot; /&gt;
   &lt;cache-path name=&quot;tt_internal_cache_download&quot; path=&quot;Download&quot; /&gt;
&lt;/paths&gt;
</code></pre>
<p><strong>工程级build.gradle 🟡</strong></p>
<p>修改并添加依赖源</p>
<pre><code>buildscript {
    repositories {
        google()
        jcenter()
        maven { url 'https://repo1.maven.org/maven2/' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.4.3'
    }
}
allprojects {
    repositories {
        google()
        jcenter()
        flatDir {
            dirs 'libs'
        }
        maven {url 'https://artifact.bytedance.com/repository/pangle'}
        maven { url 'https://repo1.maven.org/maven2/' }
    }
}
</code></pre>
<p><strong>res/layout/splash.xml🟢</strong></p>
<p>在对应目录下创建新文件,文件内容如下</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;LinearLayout
    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    xmlns:tools=&quot;http://schemas.android.com/tools&quot;
    android:layout_width=&quot;match_parent&quot;
    android:layout_height=&quot;match_parent&quot;
    android:orientation=&quot;vertical&quot;
    android:background=&quot;#000000&quot;&gt;
    &lt;FrameLayout
        android:id=&quot;@+id/splash_container&quot;
        android:layout_width=&quot;match_parent&quot;
        android:layout_height=&quot;match_parent&quot;
        android:background=&quot;#000000&quot;
        &gt;
    &lt;/FrameLayout&gt;
&lt;/LinearLayout&gt;
</code></pre>
<p><strong>res/values/strings.xml🟡</strong></p>
<p>修改文件内容，按照需要手动修改</p>
<pre><code>&lt;resources&gt;
    &lt;string name=&quot;app_name&quot; translatable=&quot;false&quot;&gt;应用名称&lt;/string&gt;
    &lt;string name=&quot;app_id&quot; translatable=&quot;false&quot;&gt;穿山甲ID&lt;/string&gt;
    &lt;string name=&quot;splash_id&quot; translatable=&quot;false&quot;&gt;开屏广告ID&lt;/string&gt;
    &lt;string name=&quot;video_id&quot; translatable=&quot;false&quot;&gt;激励视频ID&lt;/string&gt;
    &lt;string name=&quot;express_id&quot; translatable=&quot;false&quot;&gt;模板渲染插屏ID&lt;/string&gt;
    &lt;string name=&quot;banner_id&quot; translatable=&quot;false&quot;&gt;模板渲染BannerID&lt;/string&gt;
    &lt;string name=&quot;um_id&quot; translatable=&quot;false&quot;&gt;友盟ID&lt;/string&gt;
    &lt;string name=&quot;um_channel&quot; translatable=&quot;false&quot;&gt;友盟平台标识&lt;/string&gt;
&lt;/resources&gt;
</code></pre>
<p><strong>应用级build.gradle 🟡</strong></p>
<p>因为怕麻烦，直接关闭混淆</p>
<pre><code>minifyEnabled false
shrinkResources false
</code></pre>
<p>修改并添加引入</p>
<pre><code>dependencies {
    implementation fileTree(dir: '../libs', include: ['*.jar', '*.aar'])
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    implementation fileTree(dir: &quot;C:/CocosDashboard/resources/.editors/Creator/2.4.5/resources/cocos2d-x/cocos/platform/android/java/libs&quot;, include: ['*.jar'])
    implementation project(':libcocos2dx')
    implementation 'com.pangle.cn:ads-sdk:3.5.0.6'
    implementation('com.android.support:support-v4:24.2.0')
    implementation  'com.umeng.umsdk:common:9.4.0'
    implementation  'com.umeng.umsdk:asms:1.2.3'
}
</code></pre>
<p><strong>清单文件AndroidManifest.xml🟡</strong></p>
<p>根据提供的code自行修改</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    xmlns:tools=&quot;http://schemas.android.com/tools&quot;
    package=&quot;com.leningmeng.jsdzz.vivoo&quot;
    android:installLocation=&quot;auto&quot;&gt;
    &lt;uses-feature android:glEsVersion=&quot;0x00020000&quot; /&gt;
    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;
    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;
    &lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot; /&gt;
    &lt;!--穿山甲uses-permission--&gt;
    &lt;!--必要权限--&gt;
    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;
    &lt;!--可选权限--&gt;
    &lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot; /&gt;
    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;
    &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;
    &lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot; /&gt;
    &lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot; /&gt;
    &lt;uses-permission android:name=&quot;android.permission.REQUEST_INSTALL_PACKAGES&quot; /&gt;
    &lt;uses-permission android:name=&quot;android.permission.GET_TASKS&quot; /&gt;
    &lt;!--可选，穿山甲提供“获取地理位置权限”和“不给予地理位置权限，开发者传入地理位置参数”两种方式上报用户位置，两种方式均可不选，添加位置权限或参数将帮助投放定位广告--&gt;
    &lt;!--请注意：无论通过何种方式提供给穿山甲用户地理位置，均需向用户声明地理位置权限将应用于穿山甲广告投放，穿山甲不强制获取地理位置信息--&gt;
    &lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;
    &lt;!-- 如果视频广告使用textureView播放，请务必添加，否则黑屏 --&gt;
    &lt;uses-permission android:name=&quot;android.permission.WAKE_LOCK&quot; /&gt;
    &lt;!--demo场景用到的权限，不是必须的--&gt;
    &lt;uses-permission android:name=&quot;android.permission.RECEIVE_USER_PRESENT&quot; /&gt;
    &lt;uses-permission android:name=&quot;android.permission.SYSTEM_ALERT_WINDOW&quot; /&gt;
    &lt;uses-permission android:name=&quot;android.permission.EXPAND_STATUS_BAR&quot; /&gt;
    &lt;!-- 穿山甲3400版本新增：建议添加“query_all_package”权限，穿山甲将通过此权限在Android R系统上判定广告对应的应用是否在用户的app上安装，避免投放错误的广告，以此提高用户的广告体验。若添加此权限，需要在您的用户隐私文档中声明！ --&gt;
    &lt;uses-permission
        android:name=&quot;android.permission.QUERY_ALL_PACKAGES&quot;
        tools:ignore=&quot;QueryAllPackagesPermission&quot; /&gt;
    &lt;!--穿山甲uses-permission--&gt;
    &lt;application
        android:name=&quot;org.cocos2dx.javascript.CocosApplication&quot;
        android:allowBackup=&quot;true&quot;
        android:icon=&quot;@mipmap/ic_launcher&quot;
        android:label=&quot;@string/app_name&quot;
        android:usesCleartextTraffic=&quot;true&quot;&gt;
        &lt;!-- Tell Cocos2dxActivity the name of our .so --&gt;
        &lt;meta-data
            android:name=&quot;android.app.lib_name&quot;
            android:value=&quot;cocos2djs&quot; /&gt;
        &lt;activity
            android:name=&quot;org.cocos2dx.javascript.SplashActivity&quot;
            android:configChanges=&quot;orientation|keyboardHidden|screenSize|screenLayout&quot;
            android:label=&quot;@string/app_name&quot;
            android:launchMode=&quot;singleTask&quot;
            android:screenOrientation=&quot;portrait&quot;
            android:taskAffinity=&quot;&quot;
            android:theme=&quot;@android:style/Theme.NoTitleBar.Fullscreen&quot;&gt;
            &lt;intent-filter&gt;
                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;
                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;
            &lt;/intent-filter&gt;
        &lt;/activity&gt;
        &lt;activity
            android:name=&quot;org.cocos2dx.javascript.AppActivity&quot;
            android:configChanges=&quot;orientation|keyboardHidden|screenSize|screenLayout&quot;
            android:label=&quot;@string/app_name&quot;
            android:launchMode=&quot;singleTask&quot;
            android:screenOrientation=&quot;portrait&quot;
            android:taskAffinity=&quot;&quot;
            android:theme=&quot;@android:style/Theme.NoTitleBar.Fullscreen&quot;&gt;
        &lt;/activity&gt;
        &lt;provider
            android:name=&quot;com.bytedance.sdk.openadsdk.TTFileProvider&quot;
            android:authorities=&quot;${applicationId}.TTFileProvider&quot;
            android:exported=&quot;false&quot;
            android:grantUriPermissions=&quot;true&quot;&gt;
            &lt;meta-data
                android:name=&quot;android.support.FILE_PROVIDER_PATHS&quot;
                android:resource=&quot;@xml/file_paths&quot; /&gt;
        &lt;/provider&gt;
        &lt;provider
            android:name=&quot;com.bytedance.sdk.openadsdk.multipro.TTMultiProvider&quot;
            android:authorities=&quot;${applicationId}.TTMultiProvider&quot;
            android:exported=&quot;false&quot; /&gt;
    &lt;/application&gt;
&lt;/manifest&gt;
</code></pre>
<p><strong>app/src/org/cocos2dxj/avascript/CocosApplication.java🟢</strong></p>
<p>新建CocosApplication并添加内容,注意R.string需要重新引用</p>
<pre><code>package org.cocos2dx.javascript;
import android.app.Application;
import com.bytedance.sdk.openadsdk.TTAdConfig;
import com.bytedance.sdk.openadsdk.TTAdConstant;
import com.bytedance.sdk.openadsdk.TTAdManager;
import com.bytedance.sdk.openadsdk.TTAdSdk;
import com.leningmeng.jsdzz.vivoo.R;
import com.umeng.analytics.MobclickAgent;
import com.umeng.commonsdk.UMConfigure;
public class CocosApplication extends Application {
    @Override
    public void onCreate() {
        super.onCreate();
        TTAdSdk.init(this,
                new TTAdConfig.Builder()
                        .appId(this.getString(R.string.app_id))
                        .useTextureView(true) //默认使用SurfaceView播放视频广告,当有SurfaceView冲突的场景，可以使用TextureView
                        .appName(this.getString(R.string.app_name))
                        .titleBarTheme(TTAdConstant.TITLE_BAR_THEME_DARK)//落地页主题
                        .allowShowNotify(true) //是否允许sdk展示通知栏提示
                        .debug(true) //测试阶段打开，可以通过日志排查问题，上线时去除该调用
                        .directDownloadNetworkType(TTAdConstant.NETWORK_STATE_WIFI) //允许直接下载的网络状态集合,没有设置的网络下点击下载apk会有二次确认弹窗，弹窗中会披露应用信息
                        .supportMultiProcess(false) //是否支持多进程，true支持
                        .asyncInit(true) //是否异步初始化sdk,设置为true可以减少SDK初始化耗时。3450版本开始废弃~~
                        .build());
        TTAdManager ttAdManager = TTAdSdk.getAdManager();
        ttAdManager.requestPermissionIfNecessary(this);
        UMConfigure.init(this, this.getString(R.string.um_id), this.getString(R.string.um_channel), UMConfigure.DEVICE_TYPE_PHONE, &quot;&quot;);
        MobclickAgent.setPageCollectionMode(MobclickAgent.PageMode.AUTO);
    }
}
</code></pre>
<p><strong>app/src/org/cocos2dx/javascript/SplashActivity.java🟢</strong></p>
<p>新建SplashActivity文件</p>
<pre><code>package org.cocos2dx.javascript;
import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.FrameLayout;
import com.bytedance.sdk.openadsdk.AdSlot;
import com.bytedance.sdk.openadsdk.TTAdNative;
import com.bytedance.sdk.openadsdk.TTAdSdk;
import com.bytedance.sdk.openadsdk.TTSplashAd;
import com.leningmeng.jsdzz.vivoo.R;
public class SplashActivity  extends Activity {
    private FrameLayout mSplashContainer;
    String TAG = &quot;SplashActivity&quot;;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.splash);
        mSplashContainer = (FrameLayout) findViewById(R.id.splash_container);
        TTAdNative mTTAdNative = TTAdSdk.getAdManager().createAdNative(this);
        AdSlot adSlot = new AdSlot.Builder()
                .setCodeId(this.getString(R.string.splash_id))
                .setImageAcceptedSize(1080, 1920)
                .build();
        mTTAdNative.loadSplashAd(adSlot, new TTAdNative.SplashAdListener() {
            @Override
            public void onError(int i, String s) {
                Log.e(TAG,s);
                jumpToAppActivity();
            }
            @Override
            public void onTimeout() {
                Log.e(TAG,&quot;onTimeout&quot;);
                jumpToAppActivity();
            }
            @Override
            public void onSplashAdLoad(TTSplashAd ttSplashAd) {
                Log.e(TAG,&quot;onSplashAdLoad&quot;);
                if (ttSplashAd == null) {
                    return;
                }
                //获取SplashView
                View view = ttSplashAd.getSplashView();
                if (view != null &amp;&amp; mSplashContainer != null &amp;&amp; !SplashActivity.this.isFinishing()) {
                    mSplashContainer.removeAllViews();
                    //把SplashView 添加到ViewGroup中,注意开屏广告view：width =屏幕宽；height &gt;=75%屏幕高
                    mSplashContainer.addView(view);
                    //设置不开启开屏广告倒计时功能以及不显示跳过按钮,如果这么设置，您需要自定义倒计时逻辑
                    //ad.setNotAllowSdkCountdown();
                    ttSplashAd.setSplashInteractionListener(new TTSplashAd.AdInteractionListener(){
                        @Override
                        public void onAdClicked(View view, int i) {
                        }
                        @Override
                        public void onAdShow(View view, int i) {
                        }
                        @Override
                        public void onAdSkip() {
                            jumpToAppActivity();
                        }
                        @Override
                        public void onAdTimeOver() {
                            jumpToAppActivity();
                        }
                    });
                }else {
                    jumpToAppActivity();
                }
            }
        });
    }
    /**
     * 跳转到AppActivity
     */
    public void jumpToAppActivity(){
        Intent intent = new Intent(this, AppActivity.class);
        startActivity(intent);
        SplashActivity.this.finish();
    }
}
</code></pre>
<p><strong>app/src/org/cocos2dx/javascript/AppActivity.java🟡</strong></p>
<p>替换import引用部分</p>
<pre><code>import org.cocos2dx.lib.Cocos2dxActivity;
import org.cocos2dx.lib.Cocos2dxGLSurfaceView;
import org.cocos2dx.lib.Cocos2dxJavascriptJavaBridge;
import android.os.Bundle;
import android.content.Intent;
import android.content.res.Configuration;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.Gravity;
import android.view.View;
import android.widget.FrameLayout;
import android.widget.LinearLayout;
import com.bytedance.sdk.openadsdk.AdSlot;
import com.bytedance.sdk.openadsdk.TTAdConstant;
import com.bytedance.sdk.openadsdk.TTAdNative;
import com.bytedance.sdk.openadsdk.TTAdSdk;
import com.bytedance.sdk.openadsdk.TTNativeExpressAd;
import com.bytedance.sdk.openadsdk.TTRewardVideoAd;
import com.leningmeng.jsdzz.vivoo.R;
import java.util.List;
</code></pre>
<p>替换protected void onCreate为以下内容</p>
<pre><code>String TAG = &quot;AppActivity&quot;;
    protected Boolean isVideoComplete = false;
    protected static String videoCallBackName = &quot;&quot;;
    static Handler handler;
    TTNativeExpressAd bannerAd;
    LinearLayout BannerLayout;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        // Workaround in
        // https://stackoverflow.com/questions/16283079/re-launch-of-activity-on-home-button-but-only-the-first-time/16447508
        if (!isTaskRoot()) {
            // Android launched another instance of the root activity into an existing task
            // so just quietly finish and go away, dropping the user back into the activity
            // at the top of the stack (ie: the last state of this task)
            // Don't need to finish it again since it's finished in super.onCreate .
            return;
        }
        // DO OTHER INITIALIZATION BELOW
        SDKWrapper.getInstance().init(this);
        handler = new Handler() {
            public void handleMessage(Message msg) {
                switch (msg.what) {
                    case 1:
                        playVideoAd(); //播放视频广告
                        break;
                    case 2:
                        showExpressAd(); //展示模板渲染插屏
                        break;
                    case 3:
                        showBannerAd(); //展示模板渲染插屏
                        break;
                    case 4:
                        hideBannerAd(); //展示模板渲染插屏
                        break;
                    default:
                        break;
                }
            }
        };
        BannerLayout= new LinearLayout(AppActivity.this);
        BannerLayout.setOrientation(LinearLayout.VERTICAL);
        BannerLayout.setGravity(Gravity.CENTER|Gravity.BOTTOM);
        FrameLayout.LayoutParams lParams = new FrameLayout.LayoutParams(
                FrameLayout.LayoutParams.MATCH_PARENT,
                FrameLayout.LayoutParams.MATCH_PARENT);
        AppActivity.this.addContentView(BannerLayout,lParams);
    }
    /**
     * 监听Cocos端发送的Banner展示请求
     */
    public static void onCocosShowBannerAd() {
        Message msg = new Message();
        msg.what = 3;
        handler.sendMessage(msg);
    }
    /**
     * 监听Cocos端发送的Banner销毁请求
     */
    public static void onCocosHideBannerAd() {
        Message msg = new Message();
        msg.what = 4;
        handler.sendMessage(msg);
    }
    /**
     * 展示Banner广告
     */
    public void showBannerAd(){
        Log.e(TAG,&quot;展示Banner广告&quot;);
        TTAdNative mTTAdNative = TTAdSdk.getAdManager().createAdNative(this);
        AdSlot adSlot = new AdSlot.Builder()
                .setCodeId(this.getString(R.string.banner_id)) //广告位id
                .setSupportDeepLink(true)
                .setAdCount(1)
                .setExpressViewAcceptedSize(600,90) //期望模板广告view的size,单位dp
                .build();
        mTTAdNative.loadBannerExpressAd(adSlot, new TTAdNative.NativeExpressAdListener() {
            //请求失败回调
            @Override
            public void onError(int code, String message) {
                Log.e(TAG,message);
            }
            //请求成功回调
            @Override
            public void onNativeExpressAdLoad(List&lt;TTNativeExpressAd&gt; ads) {
                Log.e(TAG,&quot;Banner广告请求成功&quot;+ads.size());
                bannerAd = ads.get(0);
                bannerAd.render();
                bannerAd.setExpressInteractionListener(new TTNativeExpressAd.ExpressAdInteractionListener() {
                    //广告点击回调
                    @Override
                    public void onAdClicked(View view, int type) {
                        Log.e(TAG,&quot;onAdClicked&quot;);
                    }
                    //广告展示回调
                    @Override
                    public void onAdShow(View view, int type) {
                        Log.e(TAG,&quot;onAdShow&quot;);
                    }
                    //广告渲染失败回调
                    @Override
                    public void onRenderFail(View view, String msg, int code) {
                        Log.e(TAG,&quot;onRenderFail&quot;);
                    }
                    //广告渲染成功回调
                    @Override
                    public void onRenderSuccess(View view, float width, float height) {
                        Log.e(TAG,&quot;onRenderSuccess&quot;);
                        BannerLayout.removeAllViews();
                        BannerLayout.addView(bannerAd.getExpressAdView());
                    }
                });
            }
        });
    }
    public void hideBannerAd(){
        if(bannerAd != null){
            bannerAd.destroy();
            bannerAd = null;
        }
    }
    /**
     * 监听Cocos端发送的插屏广告展示请求
     */
    public static void onCocosShowExpressAd() {
        Message msg = new Message();
        msg.what = 2;
        handler.sendMessage(msg);
    }
    /**
     * 展示模板渲染插屏
     */
    public void showExpressAd() {
        TTAdNative mTTAdNative = TTAdSdk.getAdManager().createAdNative(this);
        AdSlot adSlot = new AdSlot.Builder()
                .setCodeId(this.getString(R.string.express_id)) //广告位id
                .setSupportDeepLink(true)
                .setAdCount(1)
                .setExpressViewAcceptedSize(300, 300) //期望模板广告view的size,单位dp
                .build();
        mTTAdNative.loadInteractionExpressAd(adSlot, new TTAdNative.NativeExpressAdListener() {
            //请求广告失败
            @Override
            public void onError(int code, String message) {
            }
            //请求广告成功
            @Override
            public void onNativeExpressAdLoad(final List&lt;TTNativeExpressAd&gt; ads) {
                ads.get(0).render();
                ads.get(0).setExpressInteractionListener(new TTNativeExpressAd.AdInteractionListener() {
                    //广告关闭回调
                    @Override
                    public void onAdDismiss() {
                    }
                    //广告点击回调
                    @Override
                    public void onAdClicked(View view, int type) {
                    }
                    //广告展示回调
                    @Override
                    public void onAdShow(View view, int type) {
                    }
                    //广告渲染失败回调
                    @Override
                    public void onRenderFail(View view, String msg, int code) {
                    }
                    //广告渲染成功回调
                    @Override
                    public void onRenderSuccess(View view, float width, float height) {
                        //在渲染成功回调时展示广告，提升体验
                        ads.get(0).showInteractionExpressAd(AppActivity.this);
                    }
                });
            }
        });
    }
    /**
     * 监听Cocos端发送的激励视频播放请求
     *
     * @param callBackName 激励视频完成回调方法名
     */
    public static void onCocosPlayVideoAd(String callBackName) {
        videoCallBackName = callBackName;
        Message msg = new Message();
        msg.what = 1;
        handler.sendMessage(msg);
    }
    TTRewardVideoAd videoAd;
    public void playVideoAd() {
        isVideoComplete = false;
        TTAdNative mTTAdNative = TTAdSdk.getAdManager().createAdNative(this);
        AdSlot adSlot = new AdSlot.Builder()
                .setCodeId(this.getString(R.string.video_id))
                .setOrientation(TTAdConstant.VERTICAL)//TTAdConstant.HORIZONTAL 或 TTAdConstant.VERTICAL
                .build();
        mTTAdNative.loadRewardVideoAd(adSlot, new TTAdNative.RewardVideoAdListener() {
            @Override
            public void onError(int i, String s) {
                Log.e(TAG, s);
            }
            @Override
            public void onRewardVideoAdLoad(TTRewardVideoAd ttRewardVideoAd) {
                Log.e(TAG, &quot;onRewardVideoAdLoad&quot;);
                videoAd = ttRewardVideoAd;
                if (videoAd != null) {
                    videoAd.setRewardAdInteractionListener(new TTRewardVideoAd.RewardAdInteractionListener() {
                        @Override
                        public void onAdShow() {
                            Log.e(TAG, &quot;onAdShow&quot;);
                        }
                        @Override
                        public void onAdVideoBarClick() {
                            Log.e(TAG, &quot;onAdVideoBarClick&quot;);
                        }
                        @Override
                        public void onAdClose() {
                            Log.e(TAG, &quot;onAdClose&quot;);
                            if (isVideoComplete) {
                                //激励回调
                                toCocos(videoCallBackName);
                            }
                        }
                        @Override
                        public void onVideoComplete() {
                            Log.e(TAG, &quot;onVideoComplete&quot;);
                            isVideoComplete = true;
                        }
                        @Override
                        public void onVideoError() {
                            Log.e(TAG, &quot;onVideoError&quot;);
                        }
                        @Override
                        public void onRewardVerify(boolean b, int i, String s, int i1, String s1) {
                            Log.e(TAG, &quot;onRewardVerify&quot;);
                        }
                        @Override
                        public void onSkippedVideo() {
                            Log.e(TAG, &quot;onSkippedVideo&quot;);
                        }
                    });
                } else {
                    Log.e(TAG, &quot;请先加载广告&quot;);
                }
            }
            @Override
            public void onRewardVideoCached() {
                Log.e(TAG, &quot;onRewardVideoCached&quot;);
                videoAd.showRewardVideoAd(AppActivity.this, TTAdConstant.RitScenes.CUSTOMIZE_SCENES, &quot;scenes_test&quot;);
            }
        });
    }
    public void toCocos(final String msg) {
        Log.e(TAG, msg);
        this.runOnGLThread(new Runnable() {
            @Override
            public void run() {
                Cocos2dxJavascriptJavaBridge.evalString(msg + &quot;();&quot;);
            }
        });
    }
</code></pre>
<h2 id="cocos端代码示例">Cocos端代码示例</h2>
<p><strong>激励视频</strong></p>
<pre><code>cc.ad.videoCallBack = function () {
    obj.success &amp;&amp; obj.success();
}
jsb.reflection.callStaticMethod(&quot;org/cocos2dx/javascript/AppActivity&quot;, &quot;onCocosPlayVideoAd&quot;, &quot;(Ljava/lang/String;)V&quot;, &quot;cc.ad.videoCallBack&quot;);
</code></pre>
<p><strong>banner和插屏</strong></p>
<pre><code>/展示Banner
jsb.reflection.callStaticMethod(&quot;org/cocos2dx/javascript/AppActivity&quot;, &quot;onCocosShowBannerAd&quot;, &quot;()V&quot;);
//隐藏Banner
jsb.reflection.callStaticMethod(&quot;org/cocos2dx/javascript/AppActivity&quot;, &quot;onCocosHideBannerAd&quot;, &quot;()V&quot;);
//展示插屏
jsb.reflection.callStaticMethod(&quot;org/cocos2dx/javascript/AppActivity&quot;, &quot;onCocosShowExpressAd&quot;, &quot;()V&quot;);
</code></pre>
]]></content>
    </entry>
</feed>